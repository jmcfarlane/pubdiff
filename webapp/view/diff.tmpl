<%inherit file="/base.tmpl"/>
<%!
  from model import ui
  from datetime import datetime
%>

## Table of contents
<table class="diff toc">
  % for i, diff in enumerate(model['diffs']):
    <% name = diff['after']['name'][:diff['after']['name'].find(':')] %>
    <tr>
      <td>${i + 1}. <a href="#${name}">${name}</a></td>
      <td>|</td>
      <td align="right">${diff['diff_stat_total']}</td>
      <td>${diff_stat(diff)}</td>
      <td>
        % if diff['comments']:
          Comments:
          <%
            comments = []
            for i, comment in enumerate(diff['comments']):
                msg = '<a href="#comment%s%s">%s</a>' % (i, name, i + 1)
                comments.append(msg)
          %>
          ${', '.join(comments)}
        % endif
      </td>
    </tr>
  % endfor
</table>

## Render each diff (left, gutter, left)
% for diff_idx, diff in enumerate(model['diffs']):
  <div class="diff-container">
    ${render_diff(diff_idx, diff)}
  </div>
% endfor

<%def name="diff_stat(d)">
  <%
    k = 'diff_stat_'
    width = 30
  %>
  % for t, s in (('added', '+'), ('removed', '-')):
    <span class="${t}">
      % if d[k + t] > width:
        ${s * int(float(d[k + t]) / float(d[k + 'total']) * width)}
      % else:
        ${s * d[k + t]}
      % endif

    </span>
  % endfor
</%def>

<%def name="render_diff(diff_idx, diff)">
  <div id="diff${diff_idx}" class="diff">
    <a name="${diff['after']['name'][:diff['after']['name'].find(':')]}"></a>
    <div class="before">
      <h2>${diff['before']['label']}</h2>
      ${code(diff, 0)}
    </div>
    <div class="delta">
      <h2>&nbsp;</h2>
      ${changes(diff) | h}
    </div>
    <div class="after">
      <h2>${diff['after']['label']}</h2>
      ${code(diff, 2)}
    </div>
  </div>

</%def>

<%def name="code(diff, position)">
  %for columns in diff['lines']:
    % if position == 0:
      ${render_line(columns[position], columns, ui.diff_before)}
    % elif position == 2:
      ${render_line(columns[position], columns, ui.diff_after)}
    % endif
  %endfor
</%def>

<%def name="render_line(line, columns, fcn)">
  % if line.strip():
    <pre class="${fcn(columns[1])}">${line | h}</pre>
  % else:
    <pre>&nbsp;</pre>
  % endif
</%def>

<%def name="changes(diff)">
  % for before, change, after in diff['lines']:
    % if change.strip():
      <pre>${change | trim}</pre>
    % else:
      <pre>&nbsp;</pre>
    % endif
  % endfor
</%def>

<%def name="css()">\
  ${parent.css()}
  <link href="/vendor/themes/base/jquery.ui.all.css"
  rel="stylesheet" type="text/css" />
</%def>

<%def name="javascript()">
  ${parent.javascript()}
  % for c in [\
              'jquery.ui.core.min.js',\
              'jquery.ui.widget.min.js',\
              'jquery.ui.mouse.min.js',\
              'jquery.ui.draggable.min.js',\
              'jquery.ui.position.min.js',\
              'jquery.ui.resizable.min.js',\
              'jquery.ui.selectable.min.js',\
              'jquery.ui.dialog.min.js',\
             ]:
    <script type="text/javascript" src="/vendor/ui/minified/${c}"></script>
  % endfor

  <script type="text/javascript" src="/diff.js"></script>

  ## Render the data required for comments
  <input id="r" type="hidden" value="${model.id}" />

  ## Render the comments themselves
  % for diff_idx, diff in enumerate(model['diffs']):
    % for i, comment in enumerate(diff.get('comments', ())):
      <%
        first_line = comment['line_numbers'][0]
        hash = 'msg%s%s' % (diff_idx, ''.join(comment['line_numbers']))
        path = diff['after']['name'][:diff['after']['name'].find(':')]
        when = datetime.fromtimestamp(comment['timestamp'])
      %>

      <div class="comment">
        <a name="comment${i}${path}"></a>
        <label>
          Comment - ${when.strftime('%c')} - ${diff['after']['label']}
        </label>
        <pre id="${hash}">${comment['msg']}</pre>
        <span id="${hash}-icon" class="comment-icon hidden">
          <label>1</label>
        </span>
      </div>

      <script>
        applyLineCommentMakers(
          $('#diff${diff_idx} .after pre').get(${first_line}),
          '${hash}'
        );
      </script>
    % endfor
  % endfor
</%def>
